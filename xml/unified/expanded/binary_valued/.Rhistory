getWM(wm.block, 1) # weight matrix after the first learning event
getWM(wm.block) # weight matrix after the last learning event
# plot weights from all (two) cues to the specified outcome
plot <- plotOutcomeWeights(wm.block, outcome="food", main="weights to outcome \"food\"", xlab="Trial", add.labels = F) # directly plot line labels: add.labels = T
dat0 <- data.frame(Cues = c("Light_loudTone", "Light_softTone"),
Outcomes = c("food", "food"),
Frequency=c(600, 300),
stringsAsFactors = FALSE)
dat.block <- data.frame(Cues = Cues_2,
Outcomes = outcomes,
Frequency = frequency,
stringsAsFactors = FALSE)
# create a training data frame with non-randomized events
train.block <- createTrainingData(dat.block, random = F)
wm.block <- RWlearning(train.block, progress = F, eta = 0.01) # error-driven learning
getWM(wm.block, 1) # weight matrix after the first learning event
getWM(wm.block) # weight matrix after the last learning event
# plot weights from all (two) cues to the specified outcome
plot <- plotOutcomeWeights(wm.block, outcome="food", main="weights to outcome \"food\"", xlab="Trial", add.labels = F) # directly plot line labels: add.labels = T
View(dat.block)
# create a training data frame with non-randomized events
train.block <- createTrainingData(dat.block, random = T)
wm.block <- RWlearning(train.block, progress = F, eta = 0.01) # error-driven learning
getWM(wm.block, 1) # weight matrix after the first learning event
getWM(wm.block) # weight matrix after the last learning event
# plot weights from all (two) cues to the specified outcome
plot <- plotOutcomeWeights(wm.block, outcome="food", main="weights to outcome \"food\"", xlab="Trial", add.labels = F) # directly plot line labels: add.labels = T
# create a training data frame with non-randomized events
train.block <- createTrainingData(dat.block, random = F)
View(train.block)
# competition and frequency another example
dat1 <- data.frame(Cues = c("Light_loudTone", "Light_softTone", "loudTone_softTone"),
Outcomes = c("food", "food", "food"),
Frequency=c(600, 300, 300),
stringsAsFactors = FALSE)
dat1
train1 <- createTrainingData(dat1, random=T)
wm1 <- RWlearning(train1, progress = F, eta = 0.01)
plot <- plotOutcomeWeights(wm1, outcome="food", main="", xlab="Trial", ylim=c(0,1), add.labels = F)
#set up a toy data set
animals1 <- data.frame(Cues = c("tail-wagging_big", "barking_small", "tail-wagging_small", "hopping_small"),
Outcomes = c("DOG", "DOG", "DOG", "RABBIT"),
Frequency = c(50, 50, 50, 50),
stringsAsFactors = FALSE)
animals1
# create training data frame
train1 <- createTrainingData(animals1, nruns = 60, random = T)
train1
wm1 <- RWlearning(train1, progress = FALSE)
plot <- plotOutcomeWeights(wml)
plot <- plotOutcomeWeights(wm1)
plot <- plotOutcomeWeights(wm1, outcome = "dog")
wm1
animals1
plotOutcomeWeights
help("plotOutcomeWeights")
plot <- plotOutcomeWeights(wm1, outcome = c("dog", "rabbit"))
plot <- plotOutcomeWeights(wm1, outcome = "DOG")
knitr::include_graphics("/images/schema_cuecomp2.png")
zz <- 5
1/ (1 + exp(-zz))
zz <- -5
1/ (1 + exp(-zz))
## logistic function
lg <- 1/ (1 + exp(zz))
1 - lg
choose(3, 9)
choose(9, 3)
seq(1)
seq(1, length.out = 600)
seq(601, length.out = 600)
seq(601, length.out = 86)
seq(2087, length.out = 20)
seq(2016, length.out = 20)
seq(2106, length.out = 20)
seq(2107, length.out = 20)
seq(2126, length.out = 20)
seq(2127, length.out = 20)
seq(2147, length.out = 20)
seq(2087, 2171)
seq(2087, 2171, by=20)
seq(2106, 2171, by=20)
seq(3001, 3084, by=20)
seq(3020, 3084, by=20)
seq(2101, 2171, by=20)
seq(2120, 2170, by=20)
seq(81, length.out = 22)
363/4
91+91+91+92
91+91+91+90
seq(6001, lengh.out = 91)
seq(6001, length.out = 91)
seq(6092, length.out = 91)
300/60
3000/60
600*10
60*60
3600/600
`1-John` <- readRDS("~/Paul_working/data/parsed_data/1-John.RDS")
View(`1-John`)
Blei_3 <- readRDS("~/Musil_article/working/Blei_3.RDS")
View(Blei_3)
log(34)
log(17)
log(50)
require(stylo)
stylo.default.settings()
setwd("~/working/demosthenes/data/xml/unified/expanded/binary_valued")
require(tidyverse)
files.v <- dir(pattern = ".RDS")
dem.files.v <- files.v[which(str_detect(files.v, "Demos"))]
###########
test.files.v <- dem.files.v
test.df.l <-  vector(mode = "list", length(test.files.v))
for (i in seq_along(test.df.l)) {
working.df <- readRDS(test.files.v[i])
n <- working.df$file_name[1]
working.df <- working.df %>%
filter(self_pos != "punctuation")
x <- which(str_detect(colnames(working.df), "_ISA_") )
working.df <- working.df[, x]
a <- working.df %>%
colMeans()
test.df.l[[i]] <- a
print(paste0("finshed file ", i))
}
combined.testing.df <- do.call(bind_rows, test.df.l)
n2 <- test.files.v %>%
gsub("_bin.*", "", .)
combined.testing.df <- add_column(combined.testing.df, chunk_id = n2, .before = TRUE)
View(combined.testing.df)
View(combined.testing.df)
holder.l <- vector(mode = "list", 3)
test.files.v[c(6, 7, 11)]
test.files.v <- test.files.v[c(6, 7, 11)]
holder.l <- vector(mode = "list", 3)
test.files.v
holder.l <- vector(mode = "list", 3)
for (i in seq_along(test.files.v)) {
working.df <- readRDS(test.files.v[i])
n <- working.df$file_name[1]
working.df <- working.df %>%
filter(self_pos != "punctuation")
x <- which(str_detect(colnames(working.df), "_ISA_") )
working.df <- working.df[, x]
holder.l[[i]] <- working.df
}
y <- do.call(bind_rows, holder.l)
y <- y %>%
colMeans()
names(y)
y <- do.call(bind_rows, holder.l)
View(y)
y <- y %>%
colMeans()
setwd("~/working/demosthenes/article/weights_and_vars")
write.csv(as.data.frame(y), file = "combined_training_Dem.csv")
setwd("~/working/demosthenes/data/xml/unified/expanded")
files.v <- dir(pattern = ".RDS")
dem.files.v <- files.v[which(str_detect(files.v, "Demos"))]
names(files.v) <- 1:length(files.v)
holder.l <- vector(mode = "list", length(dem.files.v))
for (i in seq_along(dem.files.v)) {
x <- readRDS(dem.files.v[i])
a <- which(str_detect(colnames(x), "global"))
b <- which(str_detect(colnames(x), "self"))
c <- which(str_detect(colnames(x), "parent"))
index.v <- c(1, a, b, c)
holder.l[[i]] <-x[, index.v]
print(paste0("completed file ", i))
}
base.df <- do.call(bind_rows, holder.l)
base.df <- base.df %>%
filter(self_pos != "punctuation")
a <- which(str_detect(base.df$file_name, "36"))
b <- which(str_detect(base.df$file_name, "37"))
c <- which(str_detect(base.df$file_name, "45"))
Dem.train.df <- base.df[c(a,b,c), ]
a <- which(str_detect(base.df$file_name, "50"))
b <- which(str_detect(base.df$file_name, "52"))
Apol.train.df <- base.df[c(a,b), ]
###########
dd <- Dem.train.df  %>%
group_by(parent_number) %>%
summarise(freq = n())
sum(dd$freq)
dd <- add_column(dd, perc = dd$freq/sum(dd$freq))
dd
###########
dd <- Dem.train.df  %>%
group_by(parent_numbe, parent_tense) %>%
summarise(freq = n())
sum(dd$freq)
dd <- add_column(dd, perc = dd$freq/sum(dd$freq))
dd
###########
dd <- Dem.train.df  %>%
group_by(parent_number, parent_tense) %>%
summarise(freq = n())
sum(dd$freq)
dd <- add_column(dd, perc = dd$freq/sum(dd$freq))
dd
###########
dd <- Dem.train.df  %>%
group_by(parent_number, parent_person, parent_voice) %>%
summarise(freq = n())
sum(dd$freq)
dd <- add_column(dd, perc = dd$freq/sum(dd$freq))
dd
View(dd)
###########
dd <- Apol.train.df  %>%
group_by(parent_number, parent_person, parent_voice) %>%
summarise(freq = n())
sum(dd$freq)
dd <- add_column(dd, perc = dd$freq/sum(dd$freq))
dd
###########
dd <- Dem.train.df  %>%
group_by(parent_number, parent_person, parent_voice) %>%
summarise(freq = n())
setwd("~/working/demosthenes/data/xml/unified/expanded/binary_valued")
test.df.l <-  vector(mode = "list", length(test.files.v))
for (i in seq_along(test.df.l)) {
working.df <- readRDS(test.files.v[i])
n <- working.df$file_name[1]
working.df <- working.df %>%
filter(self_pos != "punctuation")
x <- which(str_detect(colnames(working.df), "_ISA_") )
working.df <- working.df[, x]
a <- working.df %>%
colMeans()
test.df.l[[i]] <- a
print(paste0("finshed file ", i))
}
files.v <- dir(pattern = ".RDS")
dem.files.v <- files.v[which(str_detect(files.v, "Demos"))]
names(files.v) <- 1:length(files.v)
###########
test.files.v <- dem.files.v
test.df.l <-  vector(mode = "list", length(test.files.v))
for (i in seq_along(test.df.l)) {
working.df <- readRDS(test.files.v[i])
n <- working.df$file_name[1]
working.df <- working.df %>%
filter(self_pos != "punctuation")
x <- which(str_detect(colnames(working.df), "_ISA_") )
working.df <- working.df[, x]
a <- working.df %>%
colMeans()
test.df.l[[i]] <- a
print(paste0("finshed file ", i))
}
combined.testing.df <- do.call(bind_rows, test.df.l)
n2 <- test.files.v %>%
gsub("_bin.*", "", .)
combined.testing.df <- add_column(combined.testing.df, chunk_id = n2, .before = TRUE)
W <- readRDS("~/working/demosthenes/article/20220714_011616_log_model.RDS")
model <- readRDS("~/working/demosthenes/article/20220714_011616_log_model.RDS")
###
W <- model$W
##
combined.testing.df$chunk_id[14]
##
combined.testing.df$chunk_id[13]
ww <- combined.testing.df[14,2:ncol(combined.testing.df)] %>%
unlist()
ww <- c(ww, 1)
W[c(1:8), ] %*%  ww
yy <-W[7,]
pos.v <- which(yy >= 0)
ww[pos.v]
pw <- ww[pos.v] * yy[pos.v]
pw
summary(pw)
expected.W.D <- y
test.files.v
test.files.v <- test.files.v[c(15, 17)]
holder.l <- vector(mode = "list", 2)
for (i in seq_along(test.files.v)) {
working.df <- readRDS(test.files.v[i])
n <- working.df$file_name[1]
working.df <- working.df %>%
filter(self_pos != "punctuation")
x <- which(str_detect(colnames(working.df), "_ISA_") )
working.df <- working.df[, x]
holder.l[[i]] <- working.df
}
y <- do.call(bind_rows, holder.l)
y <- y %>%
colMeans()
expected.W.A <- Y
expected.W.A <- y
expected.W.A[pos.v]
ex_w_x_v <- expected.W.A[pos.v]  * yy[pos.v]
which(pw > ex_w_x_v)
which(pw > ex_w_x_v) %>%
length()
##
combined.testing.df$chunk_id[14]
ww <- combined.testing.df[14,2:ncol(combined.testing.df)] %>%
unlist()
ww <- c(ww, 1)
pw <- ww[pos.v] * yy[pos.v]
ex_w_x_v <- expected.W.A[pos.v]  * yy[pos.v]
which(pw > ex_w_x_v) %>%
length()
##
combined.testing.df$chunk_id[17]
##
combined.testing.df$chunk_id[18]
ww <- combined.testing.df[14,2:ncol(combined.testing.df)] %>%
unlist()
ww <- c(ww, 1)
ww <- combined.testing.df[18,2:ncol(combined.testing.df)] %>%
unlist()
ww <- c(ww, 1)
which(pw > ex_w_x_v) %>%
length()
##
combined.testing.df$chunk_id[12]
##
combined.testing.df$chunk_id[13]
ww <- combined.testing.df[13,2:ncol(combined.testing.df)] %>%
unlist()
ww <- c(ww, 1)
pw <- ww[pos.v] * yy[pos.v]
ex_w_x_v <- expected.W.A[pos.v]  * yy[pos.v]
which(pw > ex_w_x_v) %>%
length()
pw <- ww[pos.v] * yy[pos.v]
which(pw > ex_w_x_v) %>%
length()
##
combined.testing.df$chunk_id[14]
ww <- combined.testing.df[13,2:ncol(combined.testing.df)] %>%
unlist()
ww <- combined.testing.df[14,2:ncol(combined.testing.df)] %>%
unlist()
ww <- c(ww, 1)
pw <- ww[pos.v] * yy[pos.v]
which(pw > ex_w_x_v) %>%
length()
##
combined.testing.df$chunk_id[17]
##
combined.testing.df$chunk_id[18]
ww <- combined.testing.df[18,2:ncol(combined.testing.df)] %>%
unlist()
ww <- c(ww, 1)
pw <- ww[pos.v] * yy[pos.v]
which(pw > ex_w_x_v) %>%
length()
summary(pw)
which(max(pw))
pw[max(pw)]
max(pw)
which(pw == max(pw))
##
combined.testing.df$chunk_id[14]
##
combined.testing.df$chunk_id[13]
ww <- combined.testing.df[13,2:ncol(combined.testing.df)] %>%
unlist()
ww <- c(ww, 1)
pw <- ww[pos.v] * yy[pos.v]
summary(pw)
##
combined.testing.df$chunk_id[14]
ww <- combined.testing.df[14,2:ncol(combined.testing.df)] %>%
unlist()
ww <- c(ww, 1)
pw <- ww[pos.v] * yy[pos.v]
summary(pw)
ww <- combined.testing.df[13,2:ncol(combined.testing.df)] %>%
unlist()
ww <- c(ww, 1)
neg.v <- which(yy =< 0)
neg.v <- which(yy <= 0)
pw <- ww[pos.v] * yy[neg.v]
pw <- ww[neg.v] * yy[neg.v]
pw
ex_w_x_v <- expected.W.A[neg.v]  * yy[neg.v]
which(pw < ex_w_x_v) %>%
length()
summary(pw)
##
combined.testing.df$chunk_id[13]
##
combined.testing.df$chunk_id[14]
ww <- combined.testing.df[14,2:ncol(combined.testing.df)] %>%
unlist()
ww <- c(ww, 1)
pw <- ww[neg.v] * yy[neg.v]
ex_w_x_v <- expected.W.A[neg.v]  * yy[neg.v]
which(pw < ex_w_x_v) %>%
length()
summary(pw)
##
combined.testing.df$chunk_id[17]
##
combined.testing.df$chunk_id[18]
ww <- combined.testing.df[18,2:ncol(combined.testing.df)] %>%
unlist()
ww <- c(ww, 1)
pw <- ww[neg.v] * yy[neg.v]
ex_w_x_v <- expected.W.A[neg.v]  * yy[neg.v]
which(pw < ex_w_x_v) %>%
length()
##
combined.testing.df$chunk_id[18]
##
combined.testing.df$chunk_id[16]
ww <- combined.testing.df[16,2:ncol(combined.testing.df)] %>%
unlist()
ww <- c(ww, 1)
View(W)
yy <-W[6,]
pos.v <- which(yy >= 0)
neg.v <- which(yy <= 0)
pw <- ww[pos.v] * yy[pos.v]
ex_w_x_v <- expected.W.D[pos.v]  * yy[pos.v]
which(pw > ex_w_x_v) %>%
length()
pw <- ww[neg.v] * yy[neg.v]
ex_w_x_v <- expected.W.D[neg.v]  * yy[neg.v]
which(pw < ex_w_x_v) %>%
length()
##
combined.testing.df$chunk_id[10]
##
combined.testing.df$chunk_id[5]
ww <- combined.testing.df[5,2:ncol(combined.testing.df)] %>%
unlist()
ww <- c(ww, 1)
pw <- ww[pos.v] * yy[pos.v]
ex_w_x_v <- expected.W.D[pos.v]  * yy[pos.v]
which(pw > ex_w_x_v) %>%
length()
pw <- ww[neg.v] * yy[neg.v]
ex_w_x_v <- expected.W.D[neg.v]  * yy[neg.v]
which(pw < ex_w_x_v) %>%
length()
##
combined.testing.df$chunk_id[8]
ww <- combined.testing.df[8,2:ncol(combined.testing.df)] %>%
unlist()
ww <- c(ww, 1)
pw <- ww[pos.v] * yy[pos.v]
ex_w_x_v <- expected.W.D[pos.v]  * yy[pos.v]
which(pw > ex_w_x_v) %>%
length()
pw <- ww[neg.v] * yy[neg.v]
ex_w_x_v <- expected.W.D[neg.v]  * yy[neg.v]
which(pw < ex_w_x_v) %>%
length()
##
combined.testing.df$chunk_id[8]
##
combined.testing.df$chunk_id[9]
ww <- combined.testing.df[9,2:ncol(combined.testing.df)] %>%
unlist()
ww <- c(ww, 1)
pw <- ww[pos.v] * yy[pos.v]
ex_w_x_v <- expected.W.D[pos.v]  * yy[pos.v]
which(pw > ex_w_x_v) %>%
length()
summary(pw)
pw <- ww[neg.v] * yy[neg.v]
ex_w_x_v <- expected.W.D[neg.v]  * yy[neg.v]
which(pw < ex_w_x_v) %>%
length()
summary(pw)
##
combined.testing.df$chunk_id[18]
##
combined.testing.df$chunk_id[16]
ww <- combined.testing.df[9,2:ncol(combined.testing.df)] %>%
unlist()
ww <- c(ww, 1)
pw <- ww[pos.v] * yy[pos.v]
summary(pw)
pw <- ww[neg.v] * yy[neg.v]
summary(pw)
##
combined.testing.df$chunk_id[7]
##
combined.testing.df$chunk_id[8]
##
combined.testing.df$chunk_id[18]
##
combined.testing.df$chunk_id[16]
ww <- combined.testing.df[16,2:ncol(combined.testing.df)] %>%
unlist()
ww <- c(ww, 1)
pw <- ww[pos.v] * yy[pos.v]
summary(pw)
pw <- ww[neg.v] * yy[neg.v]
summary(pw)
##
combined.testing.df$chunk_id[13]
##
combined.testing.df$chunk_id[9]
ww <- combined.testing.df[9,2:ncol(combined.testing.df)] %>%
unlist()
ww <- c(ww, 1)
pw <- ww[pos.v] * yy[pos.v]
which(pw > ex_w_x_v) %>%
length()
summary(pw)
pw <- ww[neg.v] * yy[neg.v]
summary(pw)
